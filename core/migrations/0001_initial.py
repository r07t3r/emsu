# Generated by Django 5.2.4 on 2025-07-19 18:32

import django.contrib.auth.models
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='AcademicSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'academic_sessions',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('nursery1', 'Nursery 1'), ('nursery2', 'Nursery 2'), ('reception', 'Reception'), ('primary1', 'Primary 1'), ('primary2', 'Primary 2'), ('primary3', 'Primary 3'), ('primary4', 'Primary 4'), ('primary5', 'Primary 5'), ('primary6', 'Primary 6'), ('jss1', 'JSS 1'), ('jss2', 'JSS 2'), ('jss3', 'JSS 3'), ('ss1', 'SS 1'), ('ss2', 'SS 2'), ('ss3', 'SS 3')], max_length=20)),
                ('arm', models.CharField(default='A', max_length=10)),
                ('capacity', models.PositiveIntegerField(default=30)),
                ('current_students', models.PositiveIntegerField(default=0)),
                ('classroom_number', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'classes',
                'ordering': ['level', 'arm'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('user_type', models.CharField(choices=[('proprietor', 'School Proprietor'), ('principal', 'Principal/Head Teacher'), ('teacher', 'Teacher'), ('student', 'Student'), ('parent', 'Parent/Guardian')], max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, validators=[django.core.validators.RegexValidator(regex='^\\+?1?\\d{9,15}$')])),
                ('profile_picture', models.ImageField(blank=True, help_text='Profile picture (max 2MB)', null=True, upload_to='profiles/')),
                ('is_verified', models.BooleanField(default=False)),
                ('email_verified', models.BooleanField(default=False)),
                ('phone_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('failed_login_attempts', models.PositiveIntegerField(default=0)),
                ('account_locked_until', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'users',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('content', models.TextField()),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('is_approved', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='core.comment')),
            ],
            options={
                'db_table': 'comments',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='CommentLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('comment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='core.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'comment_likes',
            },
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_type', models.CharField(choices=[('friend', 'Friend'), ('follow', 'Follow'), ('classmate', 'Classmate'), ('colleague', 'Colleague')], default='friend', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('blocked', 'Blocked')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('from_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_from', to=settings.AUTH_USER_MODEL)),
                ('to_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections_to', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'connections',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('event_type', models.CharField(choices=[('academic', 'Academic'), ('sports', 'Sports'), ('cultural', 'Cultural'), ('examination', 'Examination'), ('meeting', 'Meeting'), ('holiday', 'Holiday'), ('other', 'Other')], default='other', max_length=20)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('location', models.CharField(blank=True, max_length=200)),
                ('is_public', models.BooleanField(default=True)),
                ('max_attendees', models.PositiveIntegerField(blank=True, null=True)),
                ('registration_required', models.BooleanField(default=False)),
                ('registration_deadline', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('organizer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='organized_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'events',
                'ordering': ['start_date'],
            },
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('registered', 'Registered'), ('attended', 'Attended'), ('absent', 'Absent'), ('cancelled', 'Cancelled')], default='registered', max_length=20)),
                ('registered_at', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
                ('attendee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.event')),
            ],
            options={
                'db_table': 'event_attendances',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='attendees',
            field=models.ManyToManyField(related_name='events_attending', through='core.EventAttendance', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('subject', models.CharField(max_length=200)),
                ('body', models.TextField()),
                ('message_type', models.CharField(choices=[('private', 'Private Message'), ('group', 'Group Message'), ('announcement', 'Announcement')], default='private', max_length=20)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='message_attachments/')),
                ('is_urgent', models.BooleanField(default=False)),
                ('read_receipt_required', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_messages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'messages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MessageRecipient',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('is_archived', models.BooleanField(default=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.message')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'message_recipients',
            },
        ),
        migrations.AddField(
            model_name='message',
            name='recipients',
            field=models.ManyToManyField(related_name='received_messages', through='core.MessageRecipient', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('info', 'Information'), ('warning', 'Warning'), ('success', 'Success'), ('error', 'Error'), ('reminder', 'Reminder')], default='info', max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('action_url', models.URLField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('post_type', models.CharField(choices=[('general', 'General'), ('educational', 'Educational'), ('announcement', 'Announcement'), ('question', 'Question'), ('resource', 'Resource'), ('achievement', 'Achievement')], default='general', max_length=20)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('school', 'School Only'), ('class', 'Class Only'), ('teachers', 'Teachers Only'), ('private', 'Private')], default='public', max_length=20)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='post_attachments/')),
                ('image', models.ImageField(blank=True, null=True, upload_to='post_images/')),
                ('likes_count', models.PositiveIntegerField(default=0)),
                ('comments_count', models.PositiveIntegerField(default=0)),
                ('shares_count', models.PositiveIntegerField(default=0)),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('is_pinned', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_published', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'posts',
                'ordering': ['-is_pinned', '-created_at'],
            },
        ),
        migrations.AddField(
            model_name='comment',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='core.post'),
        ),
        migrations.CreateModel(
            name='PostLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='core.post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_likes', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'post_likes',
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, max_length=250, unique=True)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('country', models.CharField(default='Nigeria', max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=20)),
                ('phone', models.CharField(max_length=20)),
                ('email', models.EmailField(max_length=254)),
                ('website', models.URLField(blank=True)),
                ('school_type', models.CharField(choices=[('primary', 'Primary School'), ('secondary', 'Secondary School'), ('both', 'Primary & Secondary')], max_length=20)),
                ('ownership_type', models.CharField(choices=[('private', 'Private'), ('public', 'Public'), ('mission', 'Mission')], max_length=20)),
                ('establishment_date', models.DateField(blank=True, null=True)),
                ('registration_number', models.CharField(blank=True, max_length=100, unique=True)),
                ('logo', models.ImageField(blank=True, null=True, upload_to='school_logos/')),
                ('banner_image', models.ImageField(blank=True, null=True, upload_to='school_banners/')),
                ('motto', models.CharField(blank=True, max_length=200)),
                ('vision', models.TextField(blank=True)),
                ('mission', models.TextField(blank=True)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('total_teachers', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('subscription_plan', models.CharField(default='basic', max_length=50)),
                ('subscription_expires', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'schools',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['slug'], name='schools_slug_9249fb_idx'), models.Index(fields=['is_active', 'is_verified'], name='schools_is_acti_db0dd6_idx'), models.Index(fields=['city', 'state'], name='schools_city_6f5175_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProprietorProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_license', models.CharField(blank=True, max_length=100)),
                ('years_experience', models.PositiveIntegerField(blank=True, null=True)),
                ('bio', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='proprietor_profile', to=settings.AUTH_USER_MODEL)),
                ('schools', models.ManyToManyField(related_name='proprietors', to='core.school')),
            ],
            options={
                'db_table': 'proprietor_profiles',
            },
        ),
        migrations.CreateModel(
            name='PrincipalProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=50, unique=True)),
                ('qualification', models.CharField(blank=True, max_length=200)),
                ('years_experience', models.PositiveIntegerField(blank=True, null=True)),
                ('appointment_date', models.DateField(blank=True, null=True)),
                ('bio', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='principal_profile', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='principals', to='core.school')),
            ],
            options={
                'db_table': 'principal_profiles',
            },
        ),
        migrations.AddField(
            model_name='post',
            name='school',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='core.school'),
        ),
        migrations.CreateModel(
            name='FeeStructure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fee_type', models.CharField(choices=[('tuition', 'Tuition Fee'), ('development', 'Development Fee'), ('exam', 'Examination Fee'), ('sport', 'Sports Fee'), ('transport', 'Transport Fee'), ('uniform', 'Uniform Fee'), ('book', 'Book Fee'), ('meal', 'Meal Fee'), ('other', 'Other Fee')], max_length=20)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_mandatory', models.BooleanField(default=True)),
                ('due_date', models.DateField(blank=True, null=True)),
                ('description', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('class_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='core.class')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='core.academicsession')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_structures', to='core.school')),
            ],
            options={
                'db_table': 'fee_structures',
            },
        ),
        migrations.AddField(
            model_name='event',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='core.school'),
        ),
        migrations.AddField(
            model_name='class',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='classes', to='core.school'),
        ),
        migrations.CreateModel(
            name='Announcement',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('announcement_type', models.CharField(choices=[('general', 'General'), ('academic', 'Academic'), ('event', 'Event'), ('emergency', 'Emergency'), ('holiday', 'Holiday')], default='general', max_length=20)),
                ('target_audience', models.CharField(choices=[('all', 'All Users'), ('students', 'Students Only'), ('teachers', 'Teachers Only'), ('parents', 'Parents Only'), ('staff', 'Staff Only')], default='all', max_length=20)),
                ('is_published', models.BooleanField(default=False)),
                ('publish_date', models.DateTimeField(blank=True, null=True)),
                ('expire_date', models.DateTimeField(blank=True, null=True)),
                ('is_pinned', models.BooleanField(default=False)),
                ('attachments', models.FileField(blank=True, null=True, upload_to='announcement_attachments/')),
                ('views_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='announcements', to='core.school')),
            ],
            options={
                'db_table': 'announcements',
                'ordering': ['-is_pinned', '-publish_date'],
            },
        ),
        migrations.AddField(
            model_name='academicsession',
            name='school',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='core.school'),
        ),
        migrations.CreateModel(
            name='StudentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('admission_number', models.CharField(max_length=50)),
                ('date_of_birth', models.DateField()),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female')], max_length=10)),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=5)),
                ('address', models.TextField()),
                ('state_of_origin', models.CharField(max_length=100)),
                ('nationality', models.CharField(default='Nigerian', max_length=100)),
                ('religion', models.CharField(blank=True, max_length=50)),
                ('previous_school', models.CharField(blank=True, max_length=200)),
                ('admission_date', models.DateField()),
                ('guardian_name', models.CharField(max_length=200)),
                ('guardian_phone', models.CharField(max_length=20)),
                ('guardian_email', models.EmailField(blank=True, max_length=254)),
                ('guardian_address', models.TextField(blank=True)),
                ('emergency_contact', models.CharField(max_length=200)),
                ('emergency_phone', models.CharField(max_length=20)),
                ('medical_conditions', models.TextField(blank=True)),
                ('allergies', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('graduation_date', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('current_class', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.class')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='students', to='core.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='student_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'student_profiles',
            },
        ),
        migrations.CreateModel(
            name='ParentProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('relationship', models.CharField(choices=[('father', 'Father'), ('mother', 'Mother'), ('guardian', 'Guardian'), ('relative', 'Relative'), ('other', 'Other')], max_length=20)),
                ('occupation', models.CharField(blank=True, max_length=100)),
                ('workplace', models.CharField(blank=True, max_length=200)),
                ('work_phone', models.CharField(blank=True, max_length=20)),
                ('address', models.TextField(blank=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=200)),
                ('emergency_phone', models.CharField(blank=True, max_length=20)),
                ('can_pickup_child', models.BooleanField(default=True)),
                ('authorized_pickup_persons', models.TextField(blank=True, help_text='Comma-separated names')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='parent_profile', to=settings.AUTH_USER_MODEL)),
                ('children', models.ManyToManyField(related_name='parents', to='core.studentprofile')),
            ],
            options={
                'db_table': 'parent_profiles',
            },
        ),
        migrations.CreateModel(
            name='FeePayment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_date', models.DateTimeField(auto_now_add=True)),
                ('payment_method', models.CharField(choices=[('cash', 'Cash'), ('bank_transfer', 'Bank Transfer'), ('card', 'Card Payment'), ('mobile_money', 'Mobile Money'), ('cheque', 'Cheque')], max_length=20)),
                ('reference_number', models.CharField(max_length=100, unique=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('partial', 'Partial'), ('completed', 'Completed'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('receipt_number', models.CharField(blank=True, max_length=100)),
                ('notes', models.TextField(blank=True)),
                ('recorded_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_payments', to=settings.AUTH_USER_MODEL)),
                ('fee_structure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='core.feestructure')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='fee_payments', to='core.studentprofile')),
            ],
            options={
                'db_table': 'fee_payments',
            },
        ),
        migrations.CreateModel(
            name='Enrollment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enrollment_date', models.DateField(auto_now_add=True)),
                ('is_active', models.BooleanField(default=True)),
                ('withdrawal_date', models.DateField(blank=True, null=True)),
                ('withdrawal_reason', models.TextField(blank=True)),
                ('class_enrolled', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core.class')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core.academicsession')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='enrollments', to='core.studentprofile')),
            ],
            options={
                'db_table': 'enrollments',
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10, unique=True)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('core', 'Core Subject'), ('elective', 'Elective Subject'), ('vocational', 'Vocational Subject'), ('extracurricular', 'Extra-curricular')], default='core', max_length=20)),
                ('credit_units', models.PositiveIntegerField(default=1)),
                ('is_core', models.BooleanField(default=True)),
                ('applicable_levels', models.JSONField(default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'subjects',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['code'], name='subjects_code_3f80fa_idx'), models.Index(fields=['category'], name='subjects_categor_8c1690_idx')],
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('resource_type', models.CharField(choices=[('document', 'Document'), ('video', 'Video'), ('audio', 'Audio'), ('image', 'Image'), ('link', 'Web Link'), ('presentation', 'Presentation')], max_length=20)),
                ('file', models.FileField(blank=True, null=True, upload_to='resources/')),
                ('url', models.URLField(blank=True)),
                ('access_level', models.CharField(choices=[('public', 'Public'), ('school', 'School Only'), ('class', 'Class Only'), ('subject', 'Subject Only'), ('private', 'Private')], default='school', max_length=20)),
                ('tags', models.JSONField(blank=True, default=list)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_approved', models.BooleanField(default=False)),
                ('file_size', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('class_level', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='core.class')),
                ('uploader', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_resources', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='core.school')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='core.subject')),
            ],
            options={
                'db_table': 'resources',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeacherClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('class_assigned', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.class')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.academicsession')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.subject')),
            ],
            options={
                'db_table': 'teacher_classes',
            },
        ),
        migrations.CreateModel(
            name='TeacherProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee_id', models.CharField(max_length=50)),
                ('qualification', models.CharField(blank=True, max_length=200)),
                ('specialization', models.CharField(blank=True, max_length=100)),
                ('years_experience', models.PositiveIntegerField(blank=True, null=True)),
                ('employment_type', models.CharField(choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('substitute', 'Substitute')], default='full_time', max_length=20)),
                ('employment_date', models.DateField(blank=True, null=True)),
                ('salary', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('bank_account', models.CharField(blank=True, max_length=20)),
                ('emergency_contact', models.CharField(blank=True, max_length=100)),
                ('emergency_phone', models.CharField(blank=True, max_length=20)),
                ('bio', models.TextField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('classes', models.ManyToManyField(through='core.TeacherClass', to='core.class')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='teachers', to='core.school')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='teacher_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'teacher_profiles',
            },
        ),
        migrations.CreateModel(
            name='TeacherGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('is_public', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teacher_groups', to='core.school')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_groups', to='core.teacherprofile')),
                ('members', models.ManyToManyField(related_name='teacher_groups', to='core.teacherprofile')),
            ],
            options={
                'db_table': 'teacher_groups',
            },
        ),
        migrations.AddField(
            model_name='teacherclass',
            name='teacher',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teacherprofile'),
        ),
        migrations.AddField(
            model_name='class',
            name='class_teacher',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='managed_classes', to='core.teacherprofile'),
        ),
        migrations.CreateModel(
            name='Attendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('status', models.CharField(choices=[('present', 'Present'), ('absent', 'Absent'), ('late', 'Late'), ('excused', 'Excused')], max_length=10)),
                ('time_in', models.TimeField(blank=True, null=True)),
                ('time_out', models.TimeField(blank=True, null=True)),
                ('remarks', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('class_attended', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='core.class')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attendances', to='core.studentprofile')),
                ('marked_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.teacherprofile')),
            ],
            options={
                'db_table': 'attendances',
            },
        ),
        migrations.CreateModel(
            name='TeacherSubject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.academicsession')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.teacherprofile')),
            ],
            options={
                'db_table': 'teacher_subjects',
            },
        ),
        migrations.AddField(
            model_name='teacherprofile',
            name='subjects',
            field=models.ManyToManyField(through='core.TeacherSubject', to='core.subject'),
        ),
        migrations.CreateModel(
            name='Term',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('first', 'First Term'), ('second', 'Second Term'), ('third', 'Third Term')], max_length=20)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_current', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='terms', to='core.academicsession')),
            ],
            options={
                'db_table': 'terms',
                'ordering': ['session', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('assessment_type', models.CharField(choices=[('ca1', 'Continuous Assessment 1'), ('ca2', 'Continuous Assessment 2'), ('ca3', 'Continuous Assessment 3'), ('ca4', 'Continuous Assessment 4'), ('exam', 'Examination'), ('project', 'Project'), ('practical', 'Practical')], max_length=20)),
                ('score', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('total_marks', models.PositiveIntegerField(default=100)),
                ('date_recorded', models.DateTimeField(auto_now_add=True)),
                ('comments', models.TextField(blank=True)),
                ('class_taken', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='core.class')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='core.studentprofile')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='core.subject')),
                ('teacher', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='grades_given', to='core.teacherprofile')),
                ('term', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='grades', to='core.term')),
            ],
            options={
                'db_table': 'grades',
            },
        ),
        migrations.CreateModel(
            name='Timetable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.CharField(choices=[('monday', 'Monday'), ('tuesday', 'Tuesday'), ('wednesday', 'Wednesday'), ('thursday', 'Thursday'), ('friday', 'Friday'), ('saturday', 'Saturday')], max_length=20)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('room_number', models.CharField(blank=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('class_assigned', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='core.class')),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='core.school')),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='core.academicsession')),
                ('subject', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='core.subject')),
                ('teacher', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timetables', to='core.teacherprofile')),
            ],
            options={
                'db_table': 'timetables',
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['email'], name='users_email_4b85f2_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['user_type'], name='users_user_ty_578f8f_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'user_type'], name='users_is_acti_e1f8d6_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='commentlike',
            unique_together={('comment', 'user')},
        ),
        migrations.AddIndex(
            model_name='connection',
            index=models.Index(fields=['from_user', 'status'], name='connections_from_us_3cd30e_idx'),
        ),
        migrations.AddIndex(
            model_name='connection',
            index=models.Index(fields=['to_user', 'status'], name='connections_to_user_35dc96_idx'),
        ),
        migrations.AddIndex(
            model_name='connection',
            index=models.Index(fields=['connection_type'], name='connections_connect_a82531_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='connection',
            unique_together={('from_user', 'to_user')},
        ),
        migrations.AlterUniqueTogether(
            name='eventattendance',
            unique_together={('event', 'attendee')},
        ),
        migrations.AlterUniqueTogether(
            name='messagerecipient',
            unique_together={('message', 'recipient')},
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['sender', 'created_at'], name='messages_sender__bf8b1c_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['message_type'], name='messages_message_5af74b_idx'),
        ),
        migrations.AddIndex(
            model_name='message',
            index=models.Index(fields=['is_urgent'], name='messages_is_urge_ff4e54_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'is_read'], name='notificatio_recipie_583549_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['created_at'], name='notificatio_created_e4c995_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='notificatio_notific_19df93_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['post', 'created_at'], name='comments_post_id_015fcc_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['author'], name='comments_author__25752a_idx'),
        ),
        migrations.AddIndex(
            model_name='comment',
            index=models.Index(fields=['parent'], name='comments_parent__9f8798_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='postlike',
            unique_together={('post', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='principalprofile',
            unique_together={('school', 'employee_id')},
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['author', 'created_at'], name='posts_author__d19a82_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['school', 'visibility'], name='posts_school__1e25b3_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['post_type'], name='posts_post_ty_8f219b_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['is_published', 'created_at'], name='posts_is_publ_f9eba3_idx'),
        ),
        migrations.AddIndex(
            model_name='post',
            index=models.Index(fields=['is_featured'], name='posts_is_feat_68bb3d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='feestructure',
            unique_together={('school', 'session', 'class_level', 'fee_type')},
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['school', 'start_date'], name='events_school__595ea4_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['event_type'], name='events_event_t_c9f56c_idx'),
        ),
        migrations.AddIndex(
            model_name='event',
            index=models.Index(fields=['is_public'], name='events_is_publ_cf11db_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['school', 'is_published'], name='announcemen_school__1c5fc8_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['target_audience'], name='announcemen_target__e32955_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['publish_date'], name='announcemen_publish_6453a0_idx'),
        ),
        migrations.AddIndex(
            model_name='announcement',
            index=models.Index(fields=['is_pinned'], name='announcemen_is_pinn_52ad7c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='academicsession',
            unique_together={('school', 'name')},
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['school', 'is_active'], name='student_pro_school__fb5052_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['admission_number'], name='student_pro_admissi_3e761b_idx'),
        ),
        migrations.AddIndex(
            model_name='studentprofile',
            index=models.Index(fields=['current_class'], name='student_pro_current_a3a5ec_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='studentprofile',
            unique_together={('school', 'admission_number')},
        ),
        migrations.AddIndex(
            model_name='parentprofile',
            index=models.Index(fields=['relationship'], name='parent_prof_relatio_7f4a02_idx'),
        ),
        migrations.AddIndex(
            model_name='feepayment',
            index=models.Index(fields=['student', 'payment_date'], name='fee_payment_student_672d19_idx'),
        ),
        migrations.AddIndex(
            model_name='feepayment',
            index=models.Index(fields=['reference_number'], name='fee_payment_referen_d44040_idx'),
        ),
        migrations.AddIndex(
            model_name='feepayment',
            index=models.Index(fields=['status'], name='fee_payment_status_d14ebc_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['student', 'is_active'], name='enrollments_student_8f846d_idx'),
        ),
        migrations.AddIndex(
            model_name='enrollment',
            index=models.Index(fields=['class_enrolled', 'session'], name='enrollments_class_e_4efab4_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='enrollment',
            unique_together={('student', 'session')},
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['school', 'access_level'], name='resources_school__0d52bc_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['subject'], name='resources_subject_1da422_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['resource_type'], name='resources_resourc_dcd1e3_idx'),
        ),
        migrations.AddIndex(
            model_name='resource',
            index=models.Index(fields=['is_featured'], name='resources_is_feat_c45a8e_idx'),
        ),
        migrations.AddIndex(
            model_name='teachergroup',
            index=models.Index(fields=['school', 'is_active'], name='teacher_gro_school__3222da_idx'),
        ),
        migrations.AddIndex(
            model_name='teachergroup',
            index=models.Index(fields=['is_public'], name='teacher_gro_is_publ_b5eb7d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teacherclass',
            unique_together={('teacher', 'class_assigned', 'subject', 'session')},
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['school', 'level'], name='classes_school__21a17a_idx'),
        ),
        migrations.AddIndex(
            model_name='class',
            index=models.Index(fields=['is_active'], name='classes_is_acti_7c0b49_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='class',
            unique_together={('school', 'level', 'arm')},
        ),
        migrations.AddIndex(
            model_name='attendance',
            index=models.Index(fields=['student', 'date'], name='attendances_student_1e9785_idx'),
        ),
        migrations.AddIndex(
            model_name='attendance',
            index=models.Index(fields=['class_attended', 'date'], name='attendances_class_a_8af513_idx'),
        ),
        migrations.AddIndex(
            model_name='attendance',
            index=models.Index(fields=['date', 'status'], name='attendances_date_684e3c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='attendance',
            unique_together={('student', 'date')},
        ),
        migrations.AlterUniqueTogether(
            name='teachersubject',
            unique_together={('teacher', 'subject', 'session')},
        ),
        migrations.AddIndex(
            model_name='teacherprofile',
            index=models.Index(fields=['school', 'is_active'], name='teacher_pro_school__370255_idx'),
        ),
        migrations.AddIndex(
            model_name='teacherprofile',
            index=models.Index(fields=['employee_id'], name='teacher_pro_employe_3664a8_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teacherprofile',
            unique_together={('school', 'employee_id')},
        ),
        migrations.AlterUniqueTogether(
            name='term',
            unique_together={('session', 'name')},
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['student', 'term'], name='grades_student_0c1495_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['subject', 'term'], name='grades_subject_a2c91d_idx'),
        ),
        migrations.AddIndex(
            model_name='grade',
            index=models.Index(fields=['class_taken', 'term'], name='grades_class_t_694c11_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='grade',
            unique_together={('student', 'subject', 'term', 'assessment_type')},
        ),
        migrations.AddIndex(
            model_name='timetable',
            index=models.Index(fields=['school', 'day_of_week'], name='timetables_school__c19199_idx'),
        ),
        migrations.AddIndex(
            model_name='timetable',
            index=models.Index(fields=['teacher', 'day_of_week'], name='timetables_teacher_bde50f_idx'),
        ),
        migrations.AddIndex(
            model_name='timetable',
            index=models.Index(fields=['class_assigned', 'day_of_week'], name='timetables_class_a_fad62c_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='timetable',
            unique_together={('class_assigned', 'day_of_week', 'start_time', 'session')},
        ),
    ]
